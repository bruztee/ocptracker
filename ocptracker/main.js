const WebSocket = require('ws');
const axios = require('axios');
const getTokenContractsFromTransaction = require('./extractca'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å
const googleSheets = require('./google-sheets'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å Google Sheets

const SOLANA_WS_URL = "wss://little-blue-voice.solana-mainnet.quiknode.pro/e244147d0643e26f6457a8af3d12e9fe9b24c65f/";
const SOLANA_RPC_URL = "http://newyork.omeganetworks.io/"; // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω—É–∂–Ω—ã–π RPC URL

// –í–µ–±—Ö—É–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
const TRANSACTION_WEBHOOK_URL = "https://discord.com/api/webhooks/1339219442814419007/3YaVvyLuoL7vD8QNxlQl-hoRrFF9SH2oUXLW4Jh-Z_f6s4Nu5zfEA6VwChZYl_goPQu7";
const CONTRACT_WEBHOOK_URL = "https://discord.com/api/webhooks/1339178923199827968/9me92uU41YyU0gfj6oh-5tM8_QU3OmczIRQqMC367edWjYhODQlhobbdw7LeyaJi6cYS";

const monitoredOCPs = new Set([
    "infwiWUCBtdDG61p285W5uaxC3VpvwP3Ww1KEbkLSx9",
    "HcBxoEUVA1FQNmbrnvgA48WS8PRH1stErmUS8uxhARKp"
]);

const transactionQueue = [];
const contractQueue = [];
const MAX_MESSAGES_PER_SECOND = 50;
const MESSAGE_DELAY_MS = 1000; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
let lastTransactionTime = Date.now();
let lastContractTime = Date.now();

// –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
const sentContracts = new Set();

// –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
let isConnected = false;
let reconnectAttempts = 0;
const MAX_RECONNECT_ATTEMPTS = 20;
const BASE_RECONNECT_INTERVAL = 3000; // –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (3 —Å–µ–∫—É–Ω–¥—ã)
let reconnectTimeout;
let pingInterval;

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π –∏ —Ä–∞–±–æ—Ç—ã —Å Discord
const MAX_MESSAGES_PER_SECOND_DISCORD = 1; // –ú–∞–∫—Å–∏–º—É–º 1 —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥—É –¥–ª—è Discord
const MESSAGE_DELAY_MS_DISCORD = 2000; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ - 2 —Å–µ–∫—É–Ω–¥—ã
let lastContractTime_discord = Date.now();
let isProcessingQueue = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
let discordBackoffDelay = 1000; // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è Discord –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
const MAX_DISCORD_BACKOFF = 60000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö Discord (1 –º–∏–Ω—É—Ç–∞)
let discordErrorCount = 0; // –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Discord

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
googleSheets.initGoogleSheets().then(success => {
    if (success) {
        console.log('‚úÖ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ Google Sheets');
    } else {
        console.log('‚ö†Ô∏è –ó–∞–ø–∏—Å—å –≤ Google Sheets –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –ë—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Discord.');
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º —Ä–æ—Å—Ç–æ–º
function getBackoffDelay(attempt) {
    // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ 2 –º–∏–Ω—É—Ç—ã
    return Math.min(BASE_RECONNECT_INTERVAL * Math.pow(1.5, attempt), 120000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket
function connectWebSocket() {
    console.log(`üì° –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket...`);
    
    const ws = new WebSocket(SOLANA_WS_URL, {
        headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36'
        },
        handshakeTimeout: 30000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏—è –¥–æ 30 —Å–µ–∫—É–Ω–¥
    });
    
    ws.on('open', () => {
        console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Solana WebSocket");
        isConnected = true;
        reconnectAttempts = 0;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É –Ω–∏–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∑–∫–æ–≥–æ –≤—Å–ø–ª–µ—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        monitoredOCPs.forEach((ocp, index) => {
            setTimeout(() => {
                if (ws.readyState === WebSocket.OPEN) {
                    try {
                        ws.send(JSON.stringify({
                            jsonrpc: "2.0",
                            id: index + 1,
                            method: "logsSubscribe",
                            params: [
                                { "mentions": [ocp] },
                                { "commitment": "finalized" }
                            ]
                        }));
                        console.log(`üì• –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${ocp} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞`);
                    } catch (err) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: ${err.message}`);
                    }
                }
            }, index * 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        });
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ping-pong –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –±–æ–ª–µ–µ —Ä–µ–¥–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if (pingInterval) clearInterval(pingInterval);
        pingInterval = setInterval(() => {
            if (ws.readyState === WebSocket.OPEN) {
                try {
                    ws.ping();
                    console.log("üîÑ WebSocket ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
                } catch (err) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ping: ${err.message}`);
                }
            }
        }, 90000); // –û—Ç–ø—Ä–∞–≤–∫–∞ ping –∫–∞–∂–¥—ã–µ 90 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 30
    });

    ws.on('message', async (data) => {
        try {
            const response = JSON.parse(data);
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–≤–µ—Ç –º–µ—Ç–æ–¥—É –æ—Ç–ª–∏—á–Ω–æ–º—É –æ—Ç logsSubscribe (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏)
            if (response.id && !response.params) {
                console.log(`üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç ID:${response.id}: ${JSON.stringify(response).substring(0, 100)}...`);
                return;
            }
            
            if (response.params && response.params.result && response.params.result.value) {
                const signature = response.params.result.value.signature;
                console.log("üîç New txn:", signature);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è
                try {
                    const contracts = await getTokenContractsFromTransaction(signature);
                    if (contracts.length > 0) {
                        for (const contract of contracts) {
                            if (!sentContracts.has(contract)) {
                                // –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
                                sentContracts.add(contract);
                                
                                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Discord
                                contractQueue.push({
                                    content: `üìÑ New Ca: **${contract}**\n https://pump.fun/${contract}\n https://neo.bullx.io/terminal?chainId=1399811149&address=${contract}\n`,
                                    timestamp: Date.now(),
                                    retries: 0
                                });
                                
                                // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
                                if (!isProcessingQueue) {
                                    processContractQueue();
                                }
                                
                                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ Google Sheets
                                googleSheets.addContractToSheet(contract, signature)
                                    .then(success => {
                                        if (success) {
                                            console.log(`üìä –ö–æ–Ω—Ç—Ä–∞–∫—Ç ${contract} –¥–æ–±–∞–≤–ª–µ–Ω –≤ Google Sheets`);
                                        } else {
                                            console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç ${contract} –≤ Google Sheets`);
                                        }
                                    })
                                    .catch(error => {
                                        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ Google Sheets: ${error.message}`);
                                    });
                            }
                        }
                    }
                } catch (err) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${signature}: ${err.message}`);
                }
            }
        } catch (err) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è WebSocket: ${err.message}`);
        }
    });
    
    ws.on('ping', () => {
        console.log("üì• –ü–æ–ª—É—á–µ–Ω ping –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
        try {
            ws.pong();
        } catch (err) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ pong: ${err.message}`);
        }
    });
    
    ws.on('pong', () => {
        console.log("üì§ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª pong");
    });

    ws.on('error', (error) => {
        console.error(`‚ùå WebSocket –æ—à–∏–±–∫–∞: ${error.message}`);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
        if (error.message.includes('429') || error.message.includes('too many requests') || 
            error.message.includes('rate limit') || error.message.includes('limit exceeded')) {
            console.log("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤!");
        }
    });

    ws.on('close', (code, reason) => {
        console.log(`üî¥ WebSocket –æ—Ç–∫–ª—é—á–µ–Ω (–∫–æ–¥: ${code}, –ø—Ä–∏—á–∏–Ω–∞: ${reason || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}). –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...`);
        isConnected = false;
        
        // –û—á–∏—â–∞–µ–º ping –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if (pingInterval) {
            clearInterval(pingInterval);
            pingInterval = null;
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º
        if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
            const delay = getBackoffDelay(reconnectAttempts);
            reconnectAttempts++;
            console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS} —á–µ—Ä–µ–∑ ${delay/1000} —Å–µ–∫—É–Ω–¥`);
            
            if (reconnectTimeout) clearTimeout(reconnectTimeout);
            reconnectTimeout = setTimeout(() => {
                connectWebSocket();
            }, delay);
        } else {
            console.log("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...");
            setTimeout(() => process.exit(1), 60000); // –î–∞—ë–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
        }
    });
    
    return ws;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const ws = connectWebSocket();

async function processTransactionQueue() {
    if (transactionQueue.length === 0) return;

    const now = Date.now();
    const timeDiff = now - lastTransactionTime;

    if (timeDiff >= MESSAGE_DELAY_MS) {
        const message = transactionQueue.shift();
        await delay(3000);
        const success = true //await sendToDiscord(TRANSACTION_WEBHOOK_URL, message);
        if (success) {
            lastTransactionTime = Date.now();
        } else {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
            transactionQueue.push(message);
        }
        setTimeout(processTransactionQueue, MESSAGE_DELAY_MS);
    } else {
        setTimeout(processTransactionQueue, MESSAGE_DELAY_MS - timeDiff);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
async function processContractQueue() {
    if (contractQueue.length === 0) {
        isProcessingQueue = false;
        return;
    }

    isProcessingQueue = true;
    const now = Date.now();
    const timeDiff = now - lastContractTime_discord;
    
    // –õ–∏–±–æ –∂–¥–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º delay –æ—Ç –±—ç–∫–æ—Ñ—Ñ–∞
    const effectiveDelay = Math.max(MESSAGE_DELAY_MS_DISCORD - timeDiff, 0);
    
    if (effectiveDelay > 0) {
        await delay(effectiveDelay);
    }
    
    // –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    const messageData = contractQueue.shift();
    
    try {
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Discord (–ø–æ–ø—ã—Ç–∫–∞ ${messageData.retries + 1}): ${messageData.content.substring(0, 30)}...`);
        const success = await sendToDiscord(CONTRACT_WEBHOOK_URL, messageData.content);
        
        if (success) {
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Discord (–≤ –æ—á–µ—Ä–µ–¥–∏ –æ—Å—Ç–∞–ª–æ—Å—å: ${contractQueue.length})`);
            lastContractTime_discord = Date.now();
            discordErrorCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            discordBackoffDelay = 1000; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        } else {
            handleDiscordError(messageData);
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Discord: ${error.message}`);
        handleDiscordError(messageData);
    }
    
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(processContractQueue, 500);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord
function handleDiscordError(messageData) {
    discordErrorCount++;
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
    if (discordErrorCount > 1) {
        discordBackoffDelay = Math.min(discordBackoffDelay * 2, MAX_DISCORD_BACKOFF);
    }
    
    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ Discord, —É–≤–µ–ª–∏—á–∏–≤–∞—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ ${discordBackoffDelay/1000}s (–æ—à–∏–±–æ–∫: ${discordErrorCount})`);
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ –ø–æ–ø—ã—Ç–æ–∫ –º–µ–Ω—å—à–µ 5
    if (messageData.retries < 5) {
        messageData.retries++;
        messageData.timestamp = Date.now(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å, –Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫
        setTimeout(() => {
            contractQueue.push(messageData);
        }, discordBackoffDelay);
    } else {
        console.error(`‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${messageData.content.substring(0, 30)}...`);
    }
}

function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

async function sendToDiscord(webhookUrl, message) {
    try {
        const response = await axios.post(webhookUrl, { content: message }, {
            headers: {
                'Content-Type': 'application/json'
            },
            timeout: 10000 // –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ—à–∏–±–æ–∫ rate limiting
        if (response.status === 429) {
            const retryAfter = response.headers['retry-after'] || 5;
            console.log(`‚ö†Ô∏è Discord rate limit, –æ–∂–∏–¥–∞–Ω–∏–µ ${retryAfter}s`);
            await delay(retryAfter * 1000);
            return false;
        }
        
        if (response.status >= 200 && response.status < 300) {
            return true; // –£—Å–ø–µ—Ö
        } else {
            console.error(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ Discord: ${response.status}`);
            return false;
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord:", error.response?.data || error.message);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤, –∏–∑–≤–ª–µ–∫–∞–µ–º retry-after
        if (error.response && error.response.status === 429) {
            const retryAfter = error.response.headers['retry-after'] || 5;
            console.log(`‚ö†Ô∏è Discord rate limit, –æ–∂–∏–¥–∞–Ω–∏–µ ${retryAfter}s`);
            await delay(retryAfter * 1000);
        } else {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –∂–¥–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            await delay(3000);
        }
        
        return false; // –û—à–∏–±–∫–∞
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
process.on('SIGINT', () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...');
    if (pingInterval) {
        clearInterval(pingInterval);
        pingInterval = null;
    }
    if (reconnectTimeout) {
        clearTimeout(reconnectTimeout);
        reconnectTimeout = null;
    }
    if (ws && ws.readyState === WebSocket.OPEN) {
        try {
            ws.close(1000, "–®—Ç–∞—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ");
        } catch (err) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ WebSocket: ${err.message}`);
        }
    }
    process.exit(0);
});
