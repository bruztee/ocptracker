const WebSocket = require('ws');
const axios = require('axios');

const SOLANA_WS_URL = "ws://162.249.175.2:8900"; // URL –≤–∞—à–µ–≥–æ Solana RPC WebSocket

// –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
let isConnected = false;
let reconnectAttempts = 0;
const MAX_RECONNECT_ATTEMPTS = 20;
const BASE_RECONNECT_INTERVAL = 3000; // –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (3 —Å–µ–∫—É–Ω–¥—ã)
let reconnectTimeout;
let pingInterval;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º —Ä–æ—Å—Ç–æ–º
function getBackoffDelay(attempt) {
    // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ 2 –º–∏–Ω—É—Ç—ã
    return Math.min(BASE_RECONNECT_INTERVAL * Math.pow(1.5, attempt), 120000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket
function connectWebSocket() {
    console.log(`üì° –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket...`);
    
    const ws = new WebSocket(SOLANA_WS_URL, {
        headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36'
        },
        handshakeTimeout: 30000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏—è –¥–æ 30 —Å–µ–∫—É–Ω–¥
    });
    
    ws.on('open', () => {
        console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Solana WebSocket");
        isConnected = true;
        reconnectAttempts = 0;
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, —á—Ç–æ–±—ã –¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
        setTimeout(() => {
            if (ws.readyState === WebSocket.OPEN) {
                try {
                    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    ws.send(JSON.stringify({
                        jsonrpc: "2.0",
                        id: 1,
                        method: "logsSubscribe",
                        params: [
                            { "mentions": [] }, // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                            { "commitment": "processed" } // –ù–∞—á–Ω–µ–º —Å "processed"
                        ]
                    }));
                    console.log(`üì• –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ª–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞`);
                } catch (err) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: ${err.message}`);
                }
            }
        }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–µ—Ä–µ–¥ –ø–æ–¥–ø–∏—Å–∫–æ–π
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ping-pong –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –±–æ–ª–µ–µ —Ä–µ–¥–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if (pingInterval) clearInterval(pingInterval);
        pingInterval = setInterval(() => {
            if (ws.readyState === WebSocket.OPEN) {
                try {
                    ws.ping();
                    console.log("üîÑ WebSocket ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
                } catch (err) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ping: ${err.message}`);
                }
            }
        }, 90000); // –û—Ç–ø—Ä–∞–≤–∫–∞ ping –∫–∞–∂–¥—ã–µ 90 —Å–µ–∫—É–Ω–¥
    });

    ws.on('message', async (data) => {
        try {
            const response = JSON.parse(data);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–≤–µ—Ç –º–µ—Ç–æ–¥—É –ø–æ–¥–ø–∏—Å–∫–∏
            if (response.id && !response.params) {
                console.log(`üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç ID:${response.id}: ${JSON.stringify(response).substring(0, 100)}...`);
                return;
            }

            if (response.params && response.params.result && response.params.result.value) {
                const signature = response.params.result.value.signature;
                const transaction = response.params.result.value.transaction;
                const commitment = response.params.result.value.commitment;

                // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                console.log(`üîç –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${signature}`);
                console.log(`Commitment Level: ${commitment}`);

                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                if (commitment === 'processed') {
                    console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ "processed".`);
                } else if (commitment === 'confirmed') {
                    console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ "confirmed".`);
                } else if (commitment === 'finalized') {
                    console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ "finalized".`);
                }

                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –æ–±—ä–µ–º–∞ –ª–æ–≥–æ–≤
                if (transaction) {
                    console.log("Transaction Data available");
                }
            }
        } catch (err) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è WebSocket: ${err.message}`);
        }
    });
    
    ws.on('ping', () => {
        console.log("üì• –ü–æ–ª—É—á–µ–Ω ping –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
        try {
            ws.pong();
        } catch (err) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ pong: ${err.message}`);
        }
    });
    
    ws.on('pong', () => {
        console.log("üì§ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª pong");
    });

    ws.on('error', (error) => {
        console.error(`‚ùå WebSocket –æ—à–∏–±–∫–∞: ${error.message}`);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
        if (error.message.includes('429') || error.message.includes('too many requests') || 
            error.message.includes('rate limit') || error.message.includes('limit exceeded')) {
            console.log("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤!");
        }
    });

    ws.on('close', (code, reason) => {
        console.log(`üî¥ WebSocket –æ—Ç–∫–ª—é—á–µ–Ω (–∫–æ–¥: ${code}, –ø—Ä–∏—á–∏–Ω–∞: ${reason || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}). –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...`);
        isConnected = false;
        
        // –û—á–∏—â–∞–µ–º ping –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if (pingInterval) {
            clearInterval(pingInterval);
            pingInterval = null;
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º
        if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
            const delay = getBackoffDelay(reconnectAttempts);
            reconnectAttempts++;
            console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS} —á–µ—Ä–µ–∑ ${delay/1000} —Å–µ–∫—É–Ω–¥`);
            
            if (reconnectTimeout) clearTimeout(reconnectTimeout);
            reconnectTimeout = setTimeout(() => {
                connectWebSocket();
            }, delay);
        } else {
            console.log("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...");
            setTimeout(() => process.exit(1), 60000); // –î–∞—ë–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
        }
    });
    
    return ws;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const ws = connectWebSocket();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
process.on('SIGINT', () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...');
    if (pingInterval) {
        clearInterval(pingInterval);
        pingInterval = null;
    }
    if (reconnectTimeout) {
        clearTimeout(reconnectTimeout);
        reconnectTimeout = null;
    }
    if (ws && ws.readyState === WebSocket.OPEN) {
        try {
            ws.close(1000, "–®—Ç–∞—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ");
        } catch (err) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ WebSocket: ${err.message}`);
        }
    }
    process.exit(0);
});
